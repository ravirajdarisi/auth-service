// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protobufs/otp.proto

package protobufsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	protobufs "ravirajdarisi/auth-service/api/protobufs"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OtpServiceName is the fully-qualified name of the OtpService service.
	OtpServiceName = "otp.OtpService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OtpServiceGenerateOtpProcedure is the fully-qualified name of the OtpService's GenerateOtp RPC.
	OtpServiceGenerateOtpProcedure = "/otp.OtpService/GenerateOtp"
)

// OtpServiceClient is a client for the otp.OtpService service.
type OtpServiceClient interface {
	GenerateOtp(context.Context, *connect_go.Request[protobufs.OtpRequest]) (*connect_go.Response[protobufs.OtpResponse], error)
}

// NewOtpServiceClient constructs a client for the otp.OtpService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOtpServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OtpServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &otpServiceClient{
		generateOtp: connect_go.NewClient[protobufs.OtpRequest, protobufs.OtpResponse](
			httpClient,
			baseURL+OtpServiceGenerateOtpProcedure,
			opts...,
		),
	}
}

// otpServiceClient implements OtpServiceClient.
type otpServiceClient struct {
	generateOtp *connect_go.Client[protobufs.OtpRequest, protobufs.OtpResponse]
}

// GenerateOtp calls otp.OtpService.GenerateOtp.
func (c *otpServiceClient) GenerateOtp(ctx context.Context, req *connect_go.Request[protobufs.OtpRequest]) (*connect_go.Response[protobufs.OtpResponse], error) {
	return c.generateOtp.CallUnary(ctx, req)
}

// OtpServiceHandler is an implementation of the otp.OtpService service.
type OtpServiceHandler interface {
	GenerateOtp(context.Context, *connect_go.Request[protobufs.OtpRequest]) (*connect_go.Response[protobufs.OtpResponse], error)
}

// NewOtpServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOtpServiceHandler(svc OtpServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	otpServiceGenerateOtpHandler := connect_go.NewUnaryHandler(
		OtpServiceGenerateOtpProcedure,
		svc.GenerateOtp,
		opts...,
	)
	return "/otp.OtpService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OtpServiceGenerateOtpProcedure:
			otpServiceGenerateOtpHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOtpServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOtpServiceHandler struct{}

func (UnimplementedOtpServiceHandler) GenerateOtp(context.Context, *connect_go.Request[protobufs.OtpRequest]) (*connect_go.Response[protobufs.OtpResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("otp.OtpService.GenerateOtp is not implemented"))
}
